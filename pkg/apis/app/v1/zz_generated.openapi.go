// +build !ignore_autogenerated

// This file was autogenerated by openapi-gen. Do not edit it manually!

package v1

import (
	spec "github.com/go-openapi/spec"
	common "k8s.io/kube-openapi/pkg/common"
)

func GetOpenAPIDefinitions(ref common.ReferenceCallback) map[string]common.OpenAPIDefinition {
	return map[string]common.OpenAPIDefinition{
		"github.com/logancloud/logan-app-operator/pkg/apis/app/v1.Boot":                       schema_pkg_apis_app_v1_Boot(ref),
		"github.com/logancloud/logan-app-operator/pkg/apis/app/v1.BootRevision":               schema_pkg_apis_app_v1_BootRevision(ref),
		"github.com/logancloud/logan-app-operator/pkg/apis/app/v1.BootSpec":                   schema_pkg_apis_app_v1_BootSpec(ref),
		"github.com/logancloud/logan-app-operator/pkg/apis/app/v1.BootStatus":                 schema_pkg_apis_app_v1_BootStatus(ref),
		"github.com/logancloud/logan-app-operator/pkg/apis/app/v1.JavaBoot":                   schema_pkg_apis_app_v1_JavaBoot(ref),
		"github.com/logancloud/logan-app-operator/pkg/apis/app/v1.NodeJSBoot":                 schema_pkg_apis_app_v1_NodeJSBoot(ref),
		"github.com/logancloud/logan-app-operator/pkg/apis/app/v1.PersistentVolumeClaimMount": schema_pkg_apis_app_v1_PersistentVolumeClaimMount(ref),
		"github.com/logancloud/logan-app-operator/pkg/apis/app/v1.PhpBoot":                    schema_pkg_apis_app_v1_PhpBoot(ref),
		"github.com/logancloud/logan-app-operator/pkg/apis/app/v1.PythonBoot":                 schema_pkg_apis_app_v1_PythonBoot(ref),
		"github.com/logancloud/logan-app-operator/pkg/apis/app/v1.WebBoot":                    schema_pkg_apis_app_v1_WebBoot(ref),
	}
}

func schema_pkg_apis_app_v1_Boot(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "Boot is the common Schema for the all boot types API",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Description: "spec contains the desired behavior of the Boot",
							Ref:         ref("github.com/logancloud/logan-app-operator/pkg/apis/app/v1.BootSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Description: "status contains the last observed state of the BootStatus",
							Ref:         ref("github.com/logancloud/logan-app-operator/pkg/apis/app/v1.BootStatus"),
						},
					},
					"bootType": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"appKey": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"bootType", "appKey"},
			},
		},
		Dependencies: []string{
			"github.com/logancloud/logan-app-operator/pkg/apis/app/v1.BootSpec", "github.com/logancloud/logan-app-operator/pkg/apis/app/v1.BootStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_app_v1_BootRevision(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "BootRevision is the Schema for the bootrevisions API",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Description: "spec contains the desired behavior of the Boot",
							Ref:         ref("github.com/logancloud/logan-app-operator/pkg/apis/app/v1.BootSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Description: "status contains the last observed state of the BootStatus",
							Ref:         ref("github.com/logancloud/logan-app-operator/pkg/apis/app/v1.BootStatus"),
						},
					},
					"bootType": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
					"appKey": {
						SchemaProps: spec.SchemaProps{
							Type:   []string{"string"},
							Format: "",
						},
					},
				},
				Required: []string{"bootType", "appKey"},
			},
		},
		Dependencies: []string{
			"github.com/logancloud/logan-app-operator/pkg/apis/app/v1.BootSpec", "github.com/logancloud/logan-app-operator/pkg/apis/app/v1.BootStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_app_v1_BootSpec(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "BootSpec defines the desired state of Boot for specified types, as JavaBoot/PhpBoot/PythonBoot/NodeJSBoot",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"image": {
						SchemaProps: spec.SchemaProps{
							Description: "Image is the app container' image. Image must not have a tag version.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"version": {
						SchemaProps: spec.SchemaProps{
							Description: "Version is the app container's image version.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"replicas": {
						SchemaProps: spec.SchemaProps{
							Description: "Replicas is the number of desired replicas. This is a pointer to distinguish between explicit zero and unspecified. Defaults to 1.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"env": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-patch-merge-key": "name",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "Env is list of environment variables to set in the app container.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("k8s.io/api/core/v1.EnvVar"),
									},
								},
							},
						},
					},
					"port": {
						SchemaProps: spec.SchemaProps{
							Description: "Port that are exposed by the app container",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"subDomain": {
						SchemaProps: spec.SchemaProps{
							Description: "Reserved, not used. for latter use",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"health": {
						SchemaProps: spec.SchemaProps{
							Description: "Health is check path for the app container.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"readiness": {
						SchemaProps: spec.SchemaProps{
							Description: "Readiness is a readiness check path for the app container.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"prometheus": {
						SchemaProps: spec.SchemaProps{
							Description: "Prometheus will scrape metrics from the service, default is `true`",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"resources": {
						SchemaProps: spec.SchemaProps{
							Description: "Resources is the compute resource requirements for the app container",
							Ref:         ref("k8s.io/api/core/v1.ResourceRequirements"),
						},
					},
					"nodeSelector": {
						SchemaProps: spec.SchemaProps{
							Description: "NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node.",
							Type:        []string{"object"},
							AdditionalProperties: &spec.SchemaOrBool{
								Allows: true,
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"command": {
						SchemaProps: spec.SchemaProps{
							Description: "Command is command for boot's container. If empty, will use image's ENTRYPOINT, specified here if needed override.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Type:   []string{"string"},
										Format: "",
									},
								},
							},
						},
					},
					"sessionAffinity": {
						SchemaProps: spec.SchemaProps{
							Description: "SessionAffinity is SessionAffinity for boot's created service. If empty, will not set",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"nodePort": {
						SchemaProps: spec.SchemaProps{
							Description: "NodePort will expose the service on each node’s IP at a random port, default is ``",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"pvc": {
						VendorExtensible: spec.VendorExtensible{
							Extensions: spec.Extensions{
								"x-kubernetes-patch-merge-key": "name",
								"x-kubernetes-patch-strategy":  "merge",
							},
						},
						SchemaProps: spec.SchemaProps{
							Description: "pvc is list of PersistentVolumeClaim to set in the app container.",
							Type:        []string{"array"},
							Items: &spec.SchemaOrArray{
								Schema: &spec.Schema{
									SchemaProps: spec.SchemaProps{
										Ref: ref("github.com/logancloud/logan-app-operator/pkg/apis/app/v1.PersistentVolumeClaimMount"),
									},
								},
							},
						},
					},
					"priority": {
						SchemaProps: spec.SchemaProps{
							Description: "Priority will set the priorityClassName for the boot's workloads, default is ``",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"workload": {
						SchemaProps: spec.SchemaProps{
							Description: "Workload will set the wordload type for the boot,can be `Deployment` or `StatefulSet`. default is `Deployment`",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"hpa": {
						SchemaProps: spec.SchemaProps{
							Description: "Hpa is the configuration for a horizontal pod autoscaler, which automatically manages the replica count of any resource implementing the scale subresource based on the metrics specified.",
							Ref:         ref("github.com/logancloud/logan-app-operator/pkg/apis/app/v1.Hpa"),
						},
					},
				},
				Required: []string{"image", "version"},
			},
		},
		Dependencies: []string{
			"github.com/logancloud/logan-app-operator/pkg/apis/app/v1.Hpa", "github.com/logancloud/logan-app-operator/pkg/apis/app/v1.PersistentVolumeClaimMount", "k8s.io/api/core/v1.EnvVar", "k8s.io/api/core/v1.ResourceRequirements"},
	}
}

func schema_pkg_apis_app_v1_BootStatus(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "BootStatus defines the observed state of Boot for specified types, as JavaBoot/PhpBoot/PythonBoot/NodeJSBoot",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"services": {
						SchemaProps: spec.SchemaProps{
							Description: "Services is the service's name of the boot, include app and sidecar",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"workload": {
						SchemaProps: spec.SchemaProps{
							Description: "Workload is the wordload type for the boot,can be `Deployment` or `StatefulSet`",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"HPAReplicas": {
						SchemaProps: spec.SchemaProps{
							Description: "HPAReplicas the number of non-terminated replicas that are receiving active traffic",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"selector": {
						SchemaProps: spec.SchemaProps{
							Description: "Selector that identifies the pods that are receiving active traffic",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"replicas": {
						SchemaProps: spec.SchemaProps{
							Description: "Replicas is the number of desired replicas.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"currentReplicas": {
						SchemaProps: spec.SchemaProps{
							Description: "CurrentReplicas is the number of current replicas.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"readyReplicas": {
						SchemaProps: spec.SchemaProps{
							Description: "ReadyReplicas is the number of ready replicas.",
							Type:        []string{"integer"},
							Format:      "int32",
						},
					},
					"revision": {
						SchemaProps: spec.SchemaProps{
							Description: "Revision is the revision ID of the boot",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
			},
		},
	}
}

func schema_pkg_apis_app_v1_JavaBoot(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "JavaBoot is the Schema for the javaboots API",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/logancloud/logan-app-operator/pkg/apis/app/v1.BootSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/logancloud/logan-app-operator/pkg/apis/app/v1.BootStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/logancloud/logan-app-operator/pkg/apis/app/v1.BootSpec", "github.com/logancloud/logan-app-operator/pkg/apis/app/v1.BootStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_app_v1_NodeJSBoot(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "NodeJSBoot is the Schema for the nodejsboots API",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/logancloud/logan-app-operator/pkg/apis/app/v1.BootSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/logancloud/logan-app-operator/pkg/apis/app/v1.BootStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/logancloud/logan-app-operator/pkg/apis/app/v1.BootSpec", "github.com/logancloud/logan-app-operator/pkg/apis/app/v1.BootStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_app_v1_PersistentVolumeClaimMount(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PersistentVolumeClaimMount defines the Boot match a PersistentVolumeClaim",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"name": {
						SchemaProps: spec.SchemaProps{
							Description: "This must match the Name of a PersistentVolumeClaim.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"readOnly": {
						SchemaProps: spec.SchemaProps{
							Description: "Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.",
							Type:        []string{"boolean"},
							Format:      "",
						},
					},
					"mountPath": {
						SchemaProps: spec.SchemaProps{
							Description: "Path within the container at which the volume should be mounted.  Must not contain ':'.",
							Type:        []string{"string"},
							Format:      "",
						},
					},
				},
				Required: []string{"name", "mountPath"},
			},
		},
	}
}

func schema_pkg_apis_app_v1_PhpBoot(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PhpBoot is the Schema for the phpboots API",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/logancloud/logan-app-operator/pkg/apis/app/v1.BootSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/logancloud/logan-app-operator/pkg/apis/app/v1.BootStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/logancloud/logan-app-operator/pkg/apis/app/v1.BootSpec", "github.com/logancloud/logan-app-operator/pkg/apis/app/v1.BootStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_app_v1_PythonBoot(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "PythonBoot is the Schema for the pythonboots API",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/logancloud/logan-app-operator/pkg/apis/app/v1.BootSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/logancloud/logan-app-operator/pkg/apis/app/v1.BootStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/logancloud/logan-app-operator/pkg/apis/app/v1.BootSpec", "github.com/logancloud/logan-app-operator/pkg/apis/app/v1.BootStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}

func schema_pkg_apis_app_v1_WebBoot(ref common.ReferenceCallback) common.OpenAPIDefinition {
	return common.OpenAPIDefinition{
		Schema: spec.Schema{
			SchemaProps: spec.SchemaProps{
				Description: "WebBoot is the Schema for the webboots API",
				Type:        []string{"object"},
				Properties: map[string]spec.Schema{
					"kind": {
						SchemaProps: spec.SchemaProps{
							Description: "Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#types-kinds",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"apiVersion": {
						SchemaProps: spec.SchemaProps{
							Description: "APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#resources",
							Type:        []string{"string"},
							Format:      "",
						},
					},
					"metadata": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"),
						},
					},
					"spec": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/logancloud/logan-app-operator/pkg/apis/app/v1.BootSpec"),
						},
					},
					"status": {
						SchemaProps: spec.SchemaProps{
							Ref: ref("github.com/logancloud/logan-app-operator/pkg/apis/app/v1.BootStatus"),
						},
					},
				},
			},
		},
		Dependencies: []string{
			"github.com/logancloud/logan-app-operator/pkg/apis/app/v1.BootSpec", "github.com/logancloud/logan-app-operator/pkg/apis/app/v1.BootStatus", "k8s.io/apimachinery/pkg/apis/meta/v1.ObjectMeta"},
	}
}
